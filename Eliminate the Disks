//Ians Updated Code
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;
public class GameApp extends Application {

	//set the window and scenes needed for the game
	Stage window;
	Scene scene1, scene2, scene3;
	
	//global variables for ball count
	int numberOfBallsEasy = 30;
	int numberOfBallsMedium = 45;
	String errorMessage = "There are no balls left";
	
	public static void main(String[] args) {
		launch(args);
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception{
		
		//Creates the ball-panes within the scenes for the game to be played in
		window = primaryStage;
		
	    MultipleBallPane ballPane = new MultipleBallPane();
	    ballPane.setStyle("-fx-background-color: linear-gradient(to bottom, #f2f2f2, #d4d4d4);"
                + " -fx-border: 12px solid; -fx-border-color: green; -fx-background-radius: 15.0;"
                + " -fx-border-radius: 15.0");
	    
	    MultipleBallPane ballPane2 = new MultipleBallPane();
	    ballPane2.setStyle("-fx-background-color: linear-gradient(to bottom, #f2f2f2, #d4d4d4);"
                + " -fx-border: 12px solid; -fx-border-color: red; -fx-background-radius: 15.0;"
                + " -fx-border-radius: 15.0");
	    
	    BorderPane pane = new BorderPane();
	    BorderPane pane2 = new BorderPane();
	    
	    //allows the user to remove balls from the game
	    ballPane.setOnMouseClicked(e -> {
	    	if(e.getButton() == MouseButton.PRIMARY) {
	    		ballPane.getChildren().remove(e.getTarget());
	    	}
	    });
	    
	    ballPane2.setOnMouseClicked(e -> {
	    	if(e.getButton() == MouseButton.PRIMARY) {
	    		ballPane2.getChildren().remove(e.getTarget());
	    	}
	    });
		
		//Create the buttons that allow the user to select difficulty mode and start game or exit the game
		Label label1 = new Label("Eliminate the Disks");
		Label outOfBalls = new Label(errorMessage);
		
		Button button1 = new Button("Easy Mode");
		button1.setOnAction(e -> window.setScene(scene2));
		
		Button button3 = new Button("Medium Mode");
		button3.setOnAction(e -> window.setScene(scene3));
		
		Button button5 = new Button("Exit");
		button5.setOnAction(e -> Platform.exit());
		
		//String path = "audio/Blazer-Rail.wav";  
		/*Media media = new Media("Blazer-Rail.WAV");
		MediaPlayer mediaPlayer = new MediaPlayer(media);
		mediaPlayer.setAutoPlay(true);*/
			
		//Set the scene for the start window
		VBox layout1 = new VBox(20);
		layout1.setAlignment(Pos.CENTER);
		layout1.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));
		layout1.getChildren().addAll(label1, button1, button3, button5);
		scene1 = new Scene(layout1, 400, 400);
		
		//Set the easy mode scene and controls for starting and returning to the main menu
	    Button btAdd = new Button("Add Balls");
	    btAdd.setOnAction(e -> ballPane.add(numberOfBallsEasy));
	    
	    Button btSubtract = new Button("Remove Balls");
	    btSubtract.setOnAction(e -> ballPane.subtract(outOfBalls));
	    
	    Button btPlay = new Button("Play");
	    btPlay.setOnAction(e -> ballPane.play()); 
	    
	    Button btPause = new Button("Pause");
	    btPause.setOnAction(e -> ballPane.pause());
	    
		Button button2 = new Button("Main Menu");
		button2.setOnAction(e -> window.setScene(scene1));	
		
	    HBox hBox = new HBox(10);
	    hBox.setAlignment(Pos.CENTER);
	    hBox.getChildren().addAll(btAdd, btSubtract, btPlay, btPause, button2);	    
	    pane.setCenter(ballPane);
	    pane.setBottom(hBox);
	    ballPane.add(numberOfBallsEasy);
		scene2 = new Scene(pane, 400, 400);
		
		//Set the medium mode scene and controls for starting and returning to the main menu
	    Button buttonAdd = new Button("Add Balls");
	    buttonAdd.setOnAction(e -> ballPane2.add(numberOfBallsEasy));
	    
	    Button buttonSubtract = new Button("Remove Balls");
	    buttonSubtract.setOnAction(e -> ballPane2.subtract(outOfBalls));
	    
	    Button buttonPlay = new Button("Play");
	    buttonPlay.setOnAction(e -> ballPane2.play());
	    
	    Button buttonPause = new Button("Pause");
	    buttonPause.setOnAction(e -> ballPane2.pause());
	    
		Button button4 = new Button("Main Menu");
		button4.setOnAction(e -> window.setScene(scene1));
		
	    HBox hBox2 = new HBox(10);
	    hBox2.setAlignment(Pos.CENTER);
	    hBox2.getChildren().addAll(buttonAdd, buttonSubtract, buttonPlay, buttonPause, button4);
	    pane2.setCenter(ballPane2);
	    pane2.setBottom(hBox2);
	    ballPane2.add(numberOfBallsMedium);
		scene3 = new Scene(pane2, 400, 400);
		
		//Sets the window for the game
		window.setScene(scene1);
		window.setTitle("Group Project 2");
		window.show();	
	}
	private class MultipleBallPane extends Pane {
	    private Timeline animation;

	    public MultipleBallPane() {
	      // Create an animation for moving the ball

	      animation = new Timeline(new KeyFrame(Duration.millis(50), e -> moveBall()));
	      animation.setCycleCount(Timeline.INDEFINITE);
	      animation.play(); // Start animation
	    }
	    
	    public void add(int numberOfBalls) {
	    	
	    	for(int i = 1; i < numberOfBalls; i++)
	    	{
	        Color color = new Color(Math.random(), 
	          Math.random(), Math.random(), 0.5);
	        double x = (Math.random() * 30) + 30;
	        double y = (Math.random() * 30) + 30;
	        getChildren().add(new Ball(x, y, Math.random()*15 + 10, color));
	    	}
	    }
	      
	      public void subtract(Label outOfBalls) {
	    	if (getChildren().size() > 0)
	        while (getChildren().size() > 0) {
	        		getChildren().remove(getChildren().size()-1); 
	        }
	    	else {
	        	//getChildren().add(errorMessage);
	        }
	      }

	      public void play() {
	        animation.play();
	      }

	      public void pause() {
	        animation.pause();
	      }

	      protected void moveBall() {
	        for (Node node: this.getChildren()) {
	          Ball ball = (Ball)node;
	          // Check boundaries
	          if (ball.getCenterX() < ball.getRadius() || ball.getCenterX() > getWidth() - ball.getRadius()) {
	            ball.dx *= -1; // Change ball move direction
	          }
	          if (ball.getCenterY() < ball.getRadius() || ball.getCenterY() > getHeight() - ball.getRadius()) {
	            ball.dy *= -1; // Change ball move direction
	          }

	          // Adjust ball position
	          ball.setCenterX(ball.dx + ball.getCenterX());
	          ball.setCenterY(ball.dy + ball.getCenterY());
	        }
	      }
	    }
		
		/*public Ball ballList(int numberOfBalls)
		{
			ArrayList() balls = new ArrayList();
		}*/
	
	    class Ball extends Circle {
	      private double dx = ((Math.random() +1) * 10) - 9, dy = ((Math.random() +1) * 10) - 9;

	      Ball(double x, double y, double radius, Color color) {
	        super(x, y, radius);
	        setFill(color); // Set ball color
	      }
	    }
}

//new new code
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaBuilder;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;
public class GameApp extends Application {

	//set the window and scenes needed for the game
	Stage window;
	Scene scene1, scene2, scene3;
	
	public static void main(String[] args) {
		launch(args);
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception{
		
		//Creates the ball-panes within the scenes for the game to be played in
		window = primaryStage;
		
	    MultipleBallPane ballPane = new MultipleBallPane();
	    ballPane.setStyle("-fx-border-color: green");
	    
	    MultipleBallPane ballPane2 = new MultipleBallPane();
	    ballPane2.setStyle("-fx-border-color: red");
	    
	    BorderPane pane = new BorderPane();
	    BorderPane pane2 = new BorderPane();
		
		//Create the buttons that allow the user to select difficulty mode and start game or exit the game
		Label label1 = new Label("Eliminate the Disks");
		
		Button button1 = new Button("Easy Mode");
		button1.setOnAction(e -> window.setScene(scene2));
		
		Button button3 = new Button("Medium Mode");
		button3.setOnAction(e -> window.setScene(scene3));
		
		Button button5 = new Button("Exit");
		button5.setOnAction(e -> Platform.exit());
		
		Media media = new Media("audio/Blazer-Rail.wav");
		MediaPlayer mediaPlayer = new MediaPlayer(media);
		
			
		//Set the scene for the start window
		VBox layout1 = new VBox(20);
		layout1.setAlignment(Pos.CENTER);
		layout1.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));
		layout1.getChildren().addAll(label1, button1, button3, button5);
		scene1 = new Scene(layout1, 300, 300);
		
		//Set the easy mode scene and controls for starting and returning to the main menu
	    Button btAdd = new Button("+");
	    btAdd.setOnAction(e -> ballPane.add());
	    
	    Button btSubtract = new Button("-");
	    btSubtract.setOnAction(e -> ballPane.subtract());
	    
	    Button btPlay = new Button(">");
	    btPlay.setOnAction(e -> ballPane.play()); 
	    
	    Button btPause = new Button("||");
	    btPause.setOnAction(e -> ballPane.pause());
	    
		Button button2 = new Button("Main Menu");
		button2.setOnAction(e -> window.setScene(scene1));	
		
	    HBox hBox = new HBox(10);
	    hBox.setAlignment(Pos.CENTER);
	    hBox.getChildren().addAll(btAdd, btSubtract, btPlay, btPause, button2);	    
	    pane.setCenter(ballPane);
	    pane.setBottom(hBox);
		scene2 = new Scene(pane, 300, 300);
		
		//Set the medium mode scene and controls for starting and returning to the main menu
	    Button buttonAdd = new Button("+");
	    buttonAdd.setOnAction(e -> ballPane2.add());
	    
	    Button buttonSubtract = new Button("-");
	    buttonSubtract.setOnAction(e -> ballPane2.subtract());
	    
	    Button buttonPlay = new Button(">");
	    buttonPlay.setOnAction(e -> ballPane2.play());
	    
	    Button buttonPause = new Button("||");
	    buttonPause.setOnAction(e -> ballPane2.pause());
	    
		Button button4 = new Button("Main Menu");
		button4.setOnAction(e -> window.setScene(scene1));
		
	    HBox hBox2 = new HBox(10);
	    hBox2.setAlignment(Pos.CENTER);
	    hBox2.getChildren().addAll(buttonAdd, buttonSubtract, buttonPlay, buttonPause, button4);
	    pane2.setCenter(ballPane2);
	    pane2.setBottom(hBox2);
		scene3 = new Scene(pane2, 300, 350);
				
		//Sets the window for the game
		window.setScene(scene1);
		window.setTitle("Group Project 2");
		window.show();	
	}
	private class MultipleBallPane extends Pane {
	    private Timeline animation;

	    public MultipleBallPane() {
	      // Create an animation for moving the ball

	      animation = new Timeline(new KeyFrame(Duration.millis(50), e -> moveBall()));
	      animation.setCycleCount(Timeline.INDEFINITE);
	      animation.play(); // Start animation
	    }
	    
	    public void add() {
	        Color color = new Color(Math.random(), 
	          Math.random(), Math.random(), 0.5);
	        double x = (Math.random() * 30) + 30;
	        double y = (Math.random() * 30) + 30;
	        getChildren().add(new Ball(x, y, Math.random()*15 + 10, color));
	      }
	      
	      public void subtract() {
	        if (getChildren().size() > 0) {
	          getChildren().remove(getChildren().size() - 1); 
	        }
	        if(getChildren().size() == 0) {
	      	  System.out.println("There are no balls left"); // This will run but it does not print in the application window, it will print in the IDE.
	        }
	      }

	      public void play() {
	        animation.play();
	      }

	      public void pause() {
	        animation.pause();
	      }

	      protected void moveBall() {
	        for (Node node: this.getChildren()) {
	          Ball ball = (Ball)node;
	          // Check boundaries
	          if (ball.getCenterX() < ball.getRadius() || ball.getCenterX() > getWidth() - ball.getRadius()) {
	            ball.dx *= -1; // Change ball move direction
	          }
	          if (ball.getCenterY() < ball.getRadius() || ball.getCenterY() > getHeight() - ball.getRadius()) {
	            ball.dy *= -1; // Change ball move direction
	          }

	          // Adjust ball position
	          ball.setCenterX(ball.dx + ball.getCenterX());
	          ball.setCenterY(ball.dy + ball.getCenterY());
	        }
	      }
	    }

	    class Ball extends Circle {
	      private double dx = ((Math.random() +1) * 10) - 9, dy = ((Math.random() +1) * 10) - 9;

	      Ball(double x, double y, double radius, Color color) {
	        super(x, y, radius);
	        setFill(color); // Set ball color
	      }
	    }
}
